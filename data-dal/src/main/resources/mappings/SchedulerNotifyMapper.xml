<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quarkdata.data.dal.dao.SchedulerNotifyMapper">
  <resultMap id="BaseResultMap" type="com.quarkdata.data.model.dataobj.SchedulerNotify">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="scheduler_job_id" jdbcType="BIGINT" property="schedulerJobId" />
    <result column="receive_user_id" jdbcType="BIGINT" property="receiveUserId" />
    <result column="notice_type" jdbcType="CHAR" property="noticeType" />
    <result column="notice_reason_type" jdbcType="CHAR" property="noticeReasonType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, scheduler_job_id, receive_user_id, notice_type, notice_reason_type
  </sql>
  <select id="selectByExample" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotifyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from scheduler_notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from scheduler_notify
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from scheduler_notify
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotifyExample">
    delete from scheduler_notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotify">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into scheduler_notify (scheduler_job_id, receive_user_id, notice_type, 
      notice_reason_type)
    values (#{schedulerJobId,jdbcType=BIGINT}, #{receiveUserId,jdbcType=BIGINT}, #{noticeType,jdbcType=CHAR}, 
      #{noticeReasonType,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotify">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into scheduler_notify
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="schedulerJobId != null">
        scheduler_job_id,
      </if>
      <if test="receiveUserId != null">
        receive_user_id,
      </if>
      <if test="noticeType != null">
        notice_type,
      </if>
      <if test="noticeReasonType != null">
        notice_reason_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="schedulerJobId != null">
        #{schedulerJobId,jdbcType=BIGINT},
      </if>
      <if test="receiveUserId != null">
        #{receiveUserId,jdbcType=BIGINT},
      </if>
      <if test="noticeType != null">
        #{noticeType,jdbcType=CHAR},
      </if>
      <if test="noticeReasonType != null">
        #{noticeReasonType,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotifyExample" resultType="java.lang.Long">
    select count(*) from scheduler_notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update scheduler_notify
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.schedulerJobId != null">
        scheduler_job_id = #{record.schedulerJobId,jdbcType=BIGINT},
      </if>
      <if test="record.receiveUserId != null">
        receive_user_id = #{record.receiveUserId,jdbcType=BIGINT},
      </if>
      <if test="record.noticeType != null">
        notice_type = #{record.noticeType,jdbcType=CHAR},
      </if>
      <if test="record.noticeReasonType != null">
        notice_reason_type = #{record.noticeReasonType,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update scheduler_notify
    set id = #{record.id,jdbcType=BIGINT},
      scheduler_job_id = #{record.schedulerJobId,jdbcType=BIGINT},
      receive_user_id = #{record.receiveUserId,jdbcType=BIGINT},
      notice_type = #{record.noticeType,jdbcType=CHAR},
      notice_reason_type = #{record.noticeReasonType,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotify">
    update scheduler_notify
    <set>
      <if test="schedulerJobId != null">
        scheduler_job_id = #{schedulerJobId,jdbcType=BIGINT},
      </if>
      <if test="receiveUserId != null">
        receive_user_id = #{receiveUserId,jdbcType=BIGINT},
      </if>
      <if test="noticeType != null">
        notice_type = #{noticeType,jdbcType=CHAR},
      </if>
      <if test="noticeReasonType != null">
        notice_reason_type = #{noticeReasonType,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quarkdata.data.model.dataobj.SchedulerNotify">
    update scheduler_notify
    set scheduler_job_id = #{schedulerJobId,jdbcType=BIGINT},
      receive_user_id = #{receiveUserId,jdbcType=BIGINT},
      notice_type = #{noticeType,jdbcType=CHAR},
      notice_reason_type = #{noticeReasonType,jdbcType=CHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectForUpdate" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from scheduler_notify
    where id = #{id,jdbcType=BIGINT} for update
  </select>
</mapper>